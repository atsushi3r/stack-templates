{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             BSD3
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5

ghc-options:
- -Wall
- -Wcompat
- -Wincomplete-uni-patterns

library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -main-is Main
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec
    - QuickCheck

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE src/Fibonacci.hs #-}
{-# LANGUAGE BangPatterns #-}

module Fibonacci
    ( fib1
    , fib2
    , fib3
    , fib4
    ) where

fib1 :: Integral a => a -> a
fib1 n
  | n == 0    = 0
  | n == 1    = 1
  | n > 0     = fib1 (n-2) + fib1 (n-1)
  | otherwise = -1

-- | fibs is strict in fs
fib2 :: Integral a => a -> a
fib2 n = head (fibs n)
  where
    fibs a
      | a == 0 = [0]
      | a == 1 = [1,0]
      | a > 0  = let !fs = fibs (a-1)
                 in  (fs!!0 + fs!!1) : fs
      | otherwise = [-1]

-- | fibs is lazy in fs
fib3 :: Integral a => a -> a
fib3 n = head (fibs n)
  where
    fibs a
      | a == 0 = [0]
      | a == 1 = [1,0]
      | a > 0  = let fs = fibs (a-1)
                 in  (fs!!0 + fs!!1) : fs
      | otherwise = [-1]

-- | fib4 is analytic
fib4 :: Integral a => a -> a
fib4 n
  | n >= 0 = truncate $ (phi ^ n) / sqrt 5 + 1 / 2
  | otherwise = -1
  where
    phi = (1 + sqrt 5) / 2

{-# START_FILE test/FibonacciSpec.hs #-}

module FibonacciSpec (spec) where

import Test.Hspec
import Test.Hspec.QuickCheck (prop)
import Test.QuickCheck

import Fibonacci

spec :: Spec
spec = do
    describe "fib1" $ do
        it "fib1 25" $ do
            fib1 (25 :: Integer) `shouldBe` 75025
    describe "fib2" $ do
        it "fib2 50" $ do
            fib2 (50 :: Integer) `shouldBe` 12586269025
    describe "fib3" $ do
        it "fib3 50" $ do
            fib3 (50 :: Integer) `shouldBe` 12586269025
    describe "fib4" $ do
        it "fib4 50" $ do
            fib4 (50 :: Integer) `shouldBe` 12586269025
    describe "fib2 == fib4" $ do
        prop "fib2 == fib4" prop_fib2_equal_fib4

prop_fib2_equal_fib4 :: Gen Bool
prop_fib2_equal_fib4 = do
    x <- choose (0, 50) :: Gen Integer
    return $ fib2 x == fib4 x


{-# START_FILE app/Main.hs #-}

module Main where

import Fibonacci (fib1, fib2, fib3, fib4)

main :: IO ()
main = do
  print $ fib1 (10 :: Integer)
  print $ fib2 (10 :: Integer)
  print $ fib3 (10 :: Integer)
  print $ fib4 (10 :: Integer)


{-# START_FILE README.md #-}
# {{name}}


{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes


{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE .gitignore #-}
.stack-work/
{{name}}.cabal
*~

{-# START_FILE .vimrc.local #-}
augroup LocalSetting
    autocmd!
    autocmd FileType *
        \ let g:mycompile#runcommand = "stack run"
augroup END
